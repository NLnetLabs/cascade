Hardware Security Modules (HSMs)
================================

Not Using HSMs
--------------

First, understand that Cascade does *NOT* require an HSM to operate. While it
is common practice to secure cryptographic key material using an HSM, not all
operators use an HSM. Cascade is able to use `OpenSSL
<https://www.openssl.org>`_ and/or `ring <https://crates.io/crates/ring/>`_
software cryptography to generate signing keys and to cryptographically sign
DNS RRSET data, storing the generated keys in on-disk files.

An Introduction to HSMs
-----------------------

A hardware security module is typically a tamper proof hardware vault (though
software variants exist as well) capable of generating and securely storing
cryptographic keys and performing signing operations using those keys on
data provided via an interface and returning the signed result via the same
iinterface.

HSM Interfaces
--------------

Typically HSMs are interacted with programatically via an interface that
is compliant with the Oasis PKCS#11 (Public-Key Cryptography Standard)
specification. Some HSMs also or alternatively support a newer Oasis
specification called KMIP (Key Management Interoperability Protocol).

KMIP is a data (de)serialization protocol that operates on top of the widely
used TCP and TLS combination of protocols. As such it requires no additional
software or special configuration to use and poses no direct security or
stability threat to the client process.

This is quite different to PKCS#11 which requires the HSM vendor to provide
a library of code that offers a C language style interface to be used by the
client at runtime by loading the library (aka module) into its own process
with no knowledge of or control over what that code is going to do. As
Cascade is a Rust powered application, crossing the divide between the Rust
host application and a loaded C library means giving up the stability and
memory safety guarantees offered by Rust. As such Cascade was designed to
*NOT* load PKCS#11 modules directly but instead to hand that risk off to a
helper tool: :program:`kmip2pkcs11`.

Cascade and HSMs
----------------

Cascade supports both PKCS#11 and KMIP compatible HSMs (initially with KMIP
support intended primarily for communication with our :program:`kmip2pkcs11` tool,
though success has also been seen with some other KMIP implementations, e.g.
Fortanix DSM).

Supported HSMs
--------------

In principle any HSM supporting PKCS#11 v2.40 or KMIP 1.2 should be supported.
Note however that for increased security Cascade only supports TLS 1.3
connections to the KMIP server, even though KMIP 1.2 requires servers to
offer support for earlier versions of the TLS protocol with known security
vulnerabilities. For this reason Cascade *CANNOT* be used with PyKMIP as
PyKMIP only supports older vulnerable TLS ciphers.

Several HSMs have been tested in limited fashion with Cascade. Limited here
meaning normal usage only, not attempting to deliberately cause problems, and
not attempting to stress or performance test the interface. The tested HSMs
are:

- Thales Cloud HSM (PKCS#11, cloud, v7.3 Cryptovisor 7)
- Fortanix DSM (KMIP, cloud)
- Nitrokey NetHSM (PKCS#11, s/w Docker image)
- YubiHSM 2 (PKCS#11, h/w USB key)
- SoftHSM v2.6.1 (PKCS#11, s/w)

Migration
---------

How to migrate from one HSM to another can be done in one of three ways:

- Exporting signing keys from the old HSM and importing them into the new HSM.
- Using the signing keys directly from the old HSM as well as generating and
  using signing keys with the new HSM.
- Passthrough signing of the zone such that the RRSIG signature records that
  were produced by the old HSM are left intact while adding new RRSIG records
  generated by a new signing keys using the new HSM.

Which way you should use depends on the level of access available to your
current cryptographic material and your risk appetite (using your old HSM
in new ways to do the migration means using potentially less well tested
operations with which you are less familiar).

The "simplest" approach is a key roll with Cascade having no access to the old
HSM. More details on how to migrate require their own dedicated documentation
and will not be discussed further here.

Setting up `kmip2pkcs11`
------------------------

If you installed Cascade via a DEB or RPM package you should also already
have the :program:`kmip2pkcs11` software installed, unless you explicitly opted not to
install it. If installing via building from sources the instructions we
provide also describe how to install :program:`kmip2pkcs11`.

When installed via a package the daemon will not be run automatically. This is
because you will need to:

- Edit the :file:`/etc/kmip2pkcs11/config.toml` file to tell
  :program:`kmip2pkcs111` where to find the PKCS#11 module to load.
- Depending on your PKCS#11 module you may need to set PKCS#11 vendor
  specific environment variables for the :program:`kmip2pkcs11` process,
  and/or ensure that PKCS#11 vendor specific configuration files and possibly
  also other software are installed and correctly configured.
- Ensure that the :program:`kmip2pkcs11` user has access to the resources
  needed by the PKCS#11 module to be loaded.

