######################################################
#                                  _              _  #
#  _ __   __ _ _ __ ___   ___  ___| |__   ___  __| | # 
# | '_ \ / _` | '_ ` _ \ / _ \/ __| '_ \ / _ \/ _` | #
# | | | | (_| | | | | | |  __/\__ \ | | |  __/ (_| | # 
# |_| |_|\__,_|_| |_| |_|\___||___/_| |_|\___|\__,_| #
#                                                    #
######################################################

# This configuration file defines the configuration of the major
# components that comprise a pipeline of data flowing through nameshed,
# with each linked to and managed by a Central Command, like so:
#
#     +------------+--> Central Command [CC] <-+--------------+
#     |            |             |             |              |
#     v            v             v             v              v
#   Zone      Unsigned Zone    Zone      Signed Zone      Publication
#   Loader -> Review Server -> Signer -> Review Server -> Server
#    [ZL]         [RS]          [ZS]         [RS2]           [PS]
#    ^  ^       |  ^   |                    |  ^  |          |  ^  
#    |  |       v  |   v                    v  |  v          v  |  
#   XFR |      DNS |  HOOK                 DNS | HOOK       DNS |  
#      HTTP       HTTP                        HTTP             HTTP
#
# Most components offer a simple plain text status web interface. These should
# probably be changed to be JSON interfaces with a UI that uses them.
#
# The Zone Loader accepts zones via XFR (and also via disk file, but there is
# not yet any monitoring of the file for changes nor does loading a file cause
# an event to be sent to Central Command like receiving a zone via XFR does)
# then notifies the Central Command.
#
# Central Command then commands the Unsigned Zone Review Server [RS] to make
# the unsigned zone available for review. It serves this zone via its
# configured TCP/UDP port responding to any DNS queries it receives, including
# XFR. Any configured external hook scripts are invoked without waiting for
# them to complete. The hook script is passed the zone name, zone serial and a
# UUID approval token which it can use to request the zone, verify it in some
# way, then approve or reject the zone by sending a HTTP GET request (should
# probably be POST) to the interface and port of the RS component with a
# relative URL of one of the following forms:
#
#   - /rs/${ZONE_NAME}/${ZONE_SERIAL}/approve/${APPROVAL_TOKEN}
#   - /rs/${ZONE_NAME}/${ZONE_SERIAL}/reject/${APPROVAL_TOKEN}
#
# If any hook rejects the zone it will be removed from the pending setnot propagate through the pipeline.
# Note: there is no mechanism yet to purge received unsigned zone (version)s.
#
# If all hooks approve the zone the Central Command will be notified which in
# turn will instruct the Zone Signer [ZS] to sign the zone. It will use the
# signing settings defined in this file and any key files whose name matches
# that of the zone being signed.
#
# When signing is complete ZS will notify Central Command which will instruct
# the Signed Zone Review Server [RS2] to make the zone available for review in
# the same way as for [RS], but on the interface and port configured for
# [RS2], and again like [RS] hooks will be invoked to approve or reject the
# zone but this time the signed version.
#
# Once approved the Central Command will be notified which will then command
# the Publication Server [PS] to serve the signed zone on the public interface
# and port.

log_level = "info"           # "error", "warn", "info", "debug" or "trace"
log_target = "stderr"        # "stderr", "file" or "syslog"
http_listen = ["0.0.0.0:8080"]

##############################################################################
## ZL: Zone Loader:                                                         ##
##############################################################################
# Fetches one or more seconary zones via XFR from the corresponding primaries.
# Attempts zone update based on SOA timers and/or received NOTIFY.
# Supports TSIG authentication.
# HTTP interface:
#   - {http_api_path}/ - Lists the monitored zones and their status.
[units.ZL]
type = "zone-loader"
listen = [
    "tcp:127.0.0.1:8054",
    "udp:127.0.0.1:8054"
]
http_api_path = "/zl/"

# Define one or more secondary zones.
# The format is:
#   zones."ZONE NAME" = "<OPTIONAL PATH ON DISK TO LOAD FROM>"
zones."example.com" = ""

# Define which primary relates to each zone and thereby from where NOTIFY
# messages will be accepted and to where XFR queries will be sent, with an
# optional TSIG key defined to authenticate the session.
# The format is:
#   xfr_in."ZONE NAME" = "PRIMARY IP:PORT [KEY <TSIG KEY NAME>]" 
xfr_in."example.com" = "127.0.0.1:8055 KEY sec1-key"

# Define zero or more TSIG keys to use for XFR authentication.
# The format is:
#   tsig_keys."KEY NAME" = "<ALGORITHM>:<BASE64 ENCODED KEY MATERIAL>"
tsig_keys."sec1-key" = "hmac-sha256:zlCZbVJPIhobIs1gJNQfrsS3xCxxsR9pMUrGwG8OgG8="

##############################################################################
## RS: Unsigned Zone Review Server                                          ##
##############################################################################
# Makes unsigned zones available for review to specified hook scripts.
# HTTP interface:
#   - {http_api_path}/ - Lists the monitored zones and their status.
#   - {http_api_path}/rs/${ZONE_NAME}/${ZONE_SERIAL}/approve/${APPROVAL_TOKEN}
#   - {http_api_path}/rs/${ZONE_NAME}/${ZONE_SERIAL}/reject/${APPROVAL_TOKEN}
[units.RS]
type = "zone-server"
listen = [
    "tcp:127.0.0.1:8056",
    "udp:127.0.0.1:8056"
]
http_api_path = "/rs/"

# Define zero or more hooks to verify the zone versions made available for
# review. Each hook is a filesystem path to a program or script that has
# execute permission set.
hooks = ["/tmp/approve_or_deny.sh"]

# The mode of operation of the server: is it making zones available for
# review (prepublish) or for fetching by downstreams (publish).
mode = "prepublish"

# The source of zone data to server. Can be one of: unsigned, signed.
source = "unsigned"

# 
xfr_out."example.com" = "127.0.0.1 KEY sec1-key"

##############################################################################
## ZS: Zone Signer                                                          ##
##############################################################################
# DNSSEC signs approved unsigned zones.
# HTTP interface:
[units.ZS]
type = "zone-signer"
http_api_path = "/zs/"
keys_path = "/tmp/keys/"
treat_single_keys_as_csks = true

[units.ZS.denial_config]
nsec3 = [ { opt_out = "no_opt_out", nsec3_param_ttl_mode = "soa" } ]

# [units.ZS.denial_config]
# transitioning_to_nsec3 = [
#     { opt_out = "no_opt_out", nsec3_param_ttl_mode = "soa" },
#     "transitioning_dns_keys"
# ]

##############################################################################
## RS2: Signed Zone Review Server                                           ##
##############################################################################
# See [RS1].
[units.RS2]
type = "zone-server"
listen = [
    "tcp:127.0.0.1:8057",
    "udp:127.0.0.1:8057"
]
http_api_path = "/rs2/"
hooks = ["/tmp/approve_or_deny_signed.sh"]
mode = "prepublish"
source = "signed"
xfr_out."example.com" = "127.0.0.1 KEY sec1-key"

##############################################################################
## PS: Publication Server                                                   ##
##############################################################################
# See [RS] and [RS2].
[units.PS]
type = "zone-server"
listen = [
    "tcp:127.0.0.1:8058",
    "udp:127.0.0.1:8058"
]
http_api_path = "/ps/"
mode = "publish"
source = "published"
hooks = []
xfr_out."example.com" = "127.0.0.1"


##############################################################################
## CC: Central Command                                                       #
##############################################################################
# Receives evants from the specified upstream components. Sends command to
# particular units based on received events. Note: Currently the Central
# Command knows the names of the upstream components that it can send commands
# to because those names are hard-coded in the code and match the names used
# here.
[targets.CC]
type = "central-command"
sources = ["ZL", "RS", "ZS", "RS2", "PS"]
