log_level = "info"           # "error", "warn", "info", "debug" or "trace"
log_target = "stderr"        # "stderr", "file" or "syslog"
http_listen = ["0.0.0.0:8080"]

[units.ZL]
type = "zone-loader"
listen = [
    "tcp:127.0.0.1:8054",
    "udp:127.0.0.1:8054"
]
http_api_path = "/zl/"
# Define a secondary zone
zones."example.com" = ""
# Allow NOTIFY from and request XFR with auth from primary
xfr_in."example.com" = "127.0.0.1:8055 KEY sec1-key"
# Define a TSIG key to use for XFR authentication
tsig_keys."sec1-key" = "hmac-sha256:zlCZbVJPIhobIs1gJNQfrsS3xCxxsR9pMUrGwG8OgG8="

[units.RS]
type = "zone-server"
listen = [
    "tcp:127.0.0.1:8056",
    "udp:127.0.0.1:8056"
]
http_api_path = "/rs/"
hooks = ["/tmp/approve_or_deny.sh"]
mode = "prepublish"
source = "unsigned"
xfr_out."example.com" = "127.0.0.1 KEY sec1-key"

[units.ZS]
type = "zone-signer"
http_api_path = "/zs/"
keys_path = "/tmp/keys/"
treat_single_keys_as_csks = true

[units.ZS.denial_config]
nsec3 = [ { opt_out = "no_opt_out", nsec3_param_ttl_mode = "soa" } ]

# [units.ZS.denial_config]
# transitioning_to_nsec3 = [
#     { opt_out = "no_opt_out", nsec3_param_ttl_mode = "soa" },
#     "transitioning_dns_keys"
# ]

[units.RS2]
type = "zone-server"
listen = [
    "tcp:127.0.0.1:8057",
    "udp:127.0.0.1:8057"
]
http_api_path = "/rs2/"
hooks = ["/tmp/approve_or_deny_signed.sh"]
mode = "prepublish"
source = "signed"
xfr_out."example.com" = "127.0.0.1 KEY sec1-key"

[units.PS]
type = "zone-server"
listen = [
    "tcp:127.0.0.1:8058",
    "udp:127.0.0.1:8058"
]
http_api_path = "/ps/"
mode = "publish"
source = "published"
hooks = []
xfr_out."example.com" = "127.0.0.1"

[targets.CC]
type = "central-command"
sources = ["ZL", "RS", "ZS", "RS2", "PS"]
