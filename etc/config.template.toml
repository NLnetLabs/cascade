# Configuring Cascade
# ===================
#
# This is a template file.  Uncommented lines demonstrate the default settings.
# You can copy this and customize it to your liking, or write a configuration
# file from scratch using this as a reference.  

# The configuration file version.
#
# This is the only required option.  All other settings, and their defaults, are
# associated with this version number.  More versions may be added in the future
# and Cascade may drop support for older versions over time.
# 
# - 'v1': This format.
version = "v1"


# The directory storing zone policies.
#
# Zone policies are user-managed files configuring groups of zones.  You can
# modify them as you like, then ask Cascade to reload them with 'cascade policy
# reload'.
policy-dir = "/etc/cascade/policies"

# The directory storing per-zone state files.
#
# Cascade maintains an internal state file for every known zone here.  These
# files should not be modified manually, but they can be backed up and restored
# in the event of filesystem corruption.
zone-state-dir = "/var/lib/cascade/zone-state"

# The file storing TSIG key secrets.
#
# This is an internal state file containing sensitive cryptographic material.
# It should not be modified manually, but it can be backed up and restored in
# the event of filesystem corruption.  Carefully consider its security.
tsig-store-path = "/var/lib/cascade/tsig-keys.db"

# The file storing KMIP credentials.
#
# This is an internal state file containing sensitive cryptographic material.
# It should not be modified manually, but it can be backed up and restored in
# the event of filesystem corruption.  Carefully consider its security.
kmip-credentials-store-path = "/var/lib/cascade/kmip/credentials.db"

# The directory storing rollover states and on-disk DNSSEC keys.
#
# For every zone, the state of its DNSSEC keys (which keys are used, ongoing
# rollovers, etc.) are stored here.  If on-disk keys are used to sign zones,
# they are stored also here.
#
# The organization of this directory (file names and file formats) constitutes
# internal implementation details.  It should not be modified manually, but
# it can be backed up and restored in the event of filesystem corruption.
# Carefully consider its security.
#
# TODO: Move rollover state files to a separate directory?
keys-dir = "/var/lib/cascade/keys"

# The directory containing KMIP server state.
#
# Information about known KMIP servers is stored in this directory.
# 
# The organization of this directory (file names and file formats) constitutes
# internal implementation details.  It should not be modified manually, but
# it can be backed up and restored in the event of filesystem corruption.
kmip-server-state-dir = "/var/lib/cascade/kmip"

# The path to the dnst binary Cascade should use.
#
# Cascade relies on the 'dnst' program (<https://github.com/NLnetLabs/dnst>) in
# order to perform DNSSEC key rollovers.  You can specify an absolute path here,
# or just 'dnst' if it is in $PATH.
dnst-binary-path = "dnst"


# Settings relevant to any daemon program.
[daemon]

# The minimum severity of the messages logged by the daemon.
#
# Messages at or above the specified severity level will be logged.  The
# following levels are defined:
# - 'trace': A function or variable was interacted with, for debugging.
# - 'debug': Something occurred that may be relevant to debugging.
# - 'info': Things are proceeding as expected.
# - 'warning': Something does not appear to be correct.
# - 'error': Something went wrong (but Cascade can recover).
# - 'critical': Something went wrong and Cascade can't function at all.
log-level = "info"

# The location the daemon writes logs to.
#
# - type 'file': Logs are appended line-by-line to the specified file path.
#
#   It can be set to '/dev/stdout' or '/dev/stderr' for standard output and
#   error, respectively.  If it is a terminal, ANSI escape codes may be used to
#   style the output.
#
# - type 'syslog': Logs are written to the UNIX syslog.
#
#   This option is only supported on UNIX systems.
log-target = { type = "file", path = "/dev/stdout" }
#log-target = { type = "syslog" }

# Whether to apply internal daemonization.
#
# 'Daemonization' involves several steps:
# - Forking the process to disconnect it from the terminal
# - Tracking the new process' PID (by storing it in a file)
# - Binding privileged ports (below 1024) as configured
# - Dropping administrator privileges
#
# These features may be provided by an external system service manager, such as
# systemd.  If no such service manager is being used, Cascade can provide such
# features itself, by setting this option to 'true'.  This will also enable the
# 'pid-file' and 'identity' settings (although they remain optional).
#
# TODO: Link to a dedicated systemd / daemonization guide for Cascade.
daemonize = false

# The path to a PID file to maintain, if any.
#
# If specified, Cascade will maintain a PID file at this location; it will be a
# simple plain-text file containing the PID number of the daemon process.  This
# option is only supported if 'daemonize' is true.
#pid-file = "/var/run/cascade.pid"

# An identity (user and group) to assume after startup.
#
# Cascade will assume the specified identity after initialization.  Note that
# this will fail if Cascade is started without administrator privileges.  This
# option is only supported if 'daemonize' is 'true'.
#
# The identity can be specified as '<user>:<group>' or just '<user>'; in the
# latter case, the identically named group will be used.  Numeric IDs are not
# supported; only names can be used.
#
# NOTE: When using systemd, you should rely on its 'User=' and 'Group=' options
#   instead.  See <https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html#User=>.
#identity = "cascade:cascade"


# How Cascade is controlled.
[remote-control]
# Where to serve Cascade's HTTP API.
#
# The HTTP API can be used to monitor and control Cascade.  The addresses refer
# to TCP sockets that will be listened on for HTTP requests.  At the moment,
# security mechanisms like TLS are not supported.
#
# These sockets may be bound by systemd and passed into Cascade.  If systemd
# does not provide them, Cascade will bind them itself (and will do so before
# dropping privileges, if that is enabled).
servers = ["127.0.0.1:8950", "[::1]:8950"] # TODO: Pick a good default port


# How zones are loaded.
[loader]
# Where to listen for zone change notifications.
#
# A DNS server will be bound to these addresses.  If a DNS NOTIFY message for a
# known zone is received there, the zone will be reloaded appropriately.
#
# Unless explicitly specified (e.g. 'udp://localhost:8050'), each address will
# be served over UDP and TCP.  An empty array will disable listening entirely.
#
# These sockets may be bound by systemd and passed into Cascade.  If systemd
# does not provide them, Cascade will bind them itself (and will do so before
# dropping privileges, if that is enabled).
notify-listeners = ["127.0.0.1:8050", "[::1]:8050"] # TODO: Pick a good default port

# How loaded zones are reviewed.
[loader.review]
# Where to serve loaded zones for review.
#
# A DNS server will be bound to these addresses, and will serve the contents of
# all loaded zones.  This can be used to verify the consistency of these zones.
#
# Unless explicitly specified (e.g. 'udp://localhost:8051'), each address will
# be served over UDP and TCP.  An empty array will disable serving entirely.
#
# These sockets may be bound by systemd and passed into Cascade.  If systemd
# does not provide them, Cascade will bind them itself (and will do so before
# dropping privileges, if that is enabled).
servers = ["127.0.0.1:8051", "[::1]:8051"] # TODO: Pick a good default port


# How zones are signed.
[signer]

# How signed zones are reviewed.
[signer.review]
# Where to serve signed zones for review.
#
# A DNS server will be bound to these addresses, and will serve the contents of
# all signed (but not necessarily published) zones.  This can be used to check
# the correctness of the signer.
#
# Unless explicitly specified (e.g. 'udp://localhost:8052'), each address will
# be served over UDP and TCP.  An empty array will disable serving entirely.
#
# These sockets may be bound by systemd and passed into Cascade.  If systemd
# does not provide them, Cascade will bind them itself (and will do so before
# dropping privileges, if that is enabled).
servers = ["127.0.0.1:8052", "[::1]:8052"] # TODO: Pick a good default port.


# DNSSEC key management.
[key-manager]


# How zones are published.
[server]
# Where to serve published zones.
# 
# A DNS server will be bound to these addresses, and will serve the contents of
# all published zones.  This is the final output from Cascade.
#
# Unless explicitly specified (e.g. 'udp://localhost:8053'), each address will
# be served over UDP and TCP.  At least one address must be specified.
#
# These sockets may be bound by systemd and passed into Cascade.  If systemd
# does not provide them, Cascade will bind them itself (and will do so before
# dropping privileges, if that is enabled).
servers = ["127.0.0.1:8053", "[::1]:8053"] # TODO: Pick a good default port.
