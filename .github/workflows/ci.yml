name: ci
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [1.84.0, stable, beta, nightly]

        # Test with no features, default features ("") and all features.
        # Ordered fewest features to most features.
        args: ["--no-default-features", "", "--all-features"]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: hecrj/setup-rust-action@v2
      with:
        rust-version: ${{ matrix.rust }}
    - run: cargo build --verbose ${{ matrix.args }}

  test:    
    name: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [1.84.0, stable, beta, nightly]

        # Test with no features, default features ("") and all features.
        # Ordered fewest features to most features.
        args: ["--no-default-features", "", "--all-features"]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: hecrj/setup-rust-action@v2
      with:
        rust-version: ${{ matrix.rust }}
    - run: cargo test --verbose ${{ matrix.args }}

  clippy:
    name: clippy
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: hecrj/setup-rust-action@v2
      with:
        rust-version: ${{ matrix.rust }}
    - run: cargo clippy --all -- -D warnings

  fmt:
    name: fmt
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: hecrj/setup-rust-action@v2
      with:
        rust-version: ${{ matrix.rust }}
    - run: cargo fmt --check
